/* Filter Algorithm */

#define N 3

int level[N] = -1;
//int counter[N] = 10;
int last_to_enter[(N - 1)];
bool check[N];
int ncrit;

active [N] proctype user() 
{
	assert (_pid < N);
	int l;
again:  l = 0;
	for (l : 0 .. (N - 2)) {
	    level[_pid] = l;
	    last_to_enter[l] = _pid;
	    bool wait = false;
	    
	    /* Wait loop translation to promela */
	    int k;
	    do
	    :: (check[_pid] == false) -> check[_pid] = true;
	    for (k : 0 .. (N - 1)) { 
		if 
		:: (last_to_enter[l] != _pid || ((level[k] < l && k != _pid) || (k == _pid))) -> check[_pid] = check[_pid] && true;
		:: else -> check[_pid] = false;
		fi
	    }
	    :: (check[_pid] == true) -> check[_pid] = false; break;
	    od
	}
	ncrit = ncrit + 1;
	assert(ncrit == 1);
	printf("Process %d is in CS\n", _pid);
	ncrit = ncrit - 1;
	//counter[_pid] = counter[_pid] - 1;
	level[_pid] = -1;

	//if 
	/*:: (counter[_pid] > 0) -> */ goto again;
	//:: else -> skip;
	//fi
}