/* Tournament Algorithm based on Peterson's Algorithm for Two Processes */

#define N 4 /* Number of processes */
#define LEVEL 2 /* How many levels you need of competition for the tournament (log (N)) 
	      	   NOTE: can't be done in promela easily because of non-floating point numbers 
		   and hard to use embedded c_code constructs that can't interact with promela code */

/* array type to imply two-dimensional arrays for wantCS and turn */
typedef array {
	int procs[N];
};


array wantCS[LEVEL];
array turn[LEVEL];
int ncrit;

active [N] proctype user()
{
	int node;
	int level;
	int mult;
	int path[LEVEL] = -1;
again: 	mult = 1;
	level = 0;
	node = _pid;
	for (level : 0 .. (LEVEL - 1)) {
	    int id = node % 2;
	    node = node / 2;
	    wantCS[level].procs[2 * node + id] = 1;
	    path[level] = 2 * node + id;
	    turn[level].procs[node] = 1 - id;
	    do
	    :: (wantCS[level].procs[2 * node + 1 - id] == 0 || turn[level].procs[node] == id) -> break;
	    :: else -> skip;
	    od
	}

	ncrit = ncrit + 1;
	assert(ncrit == 1);
	printf("Process %d is in CS\n", _pid);
	ncrit = ncrit - 1;
	
	level = LEVEL - 1;
	do
	:: (level >= 0) -> wantCS[level].procs[path[level]] = 0; level = level - 1;
	:: (level < 0) -> break;
	od
	
	goto again
}

