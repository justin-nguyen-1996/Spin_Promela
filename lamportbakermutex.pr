#define NUM_PROCS 100

bit choose[NUM_PROCS];
byte ticket[NUM_PROCS];
byte mutex; /* # procs in critical section */

proctype P(byte i) {
    choose[i] = 1;
    int tempMax = 0;
    int h;
    for (h: 0 .. NUM_PROCS-1) {
        if
        :: (tempMax < ticket[h]) -> tempMax = ticket[h];
        :: else
        fi
    }

    ticket[i] = tempMax + 1;
    printf("turn for process (%d) is %d\n", i, ticket[i]);
    choose[i] = 0;

    for (h: 0 .. NUM_PROCS-1) {
        choose[h] == 0;
        ((ticket[h] == 0) || (ticket[h] > ticket[i]) || ((ticket[h] == ticket[i]) && (h > i)) || h == i);
    }

    printf("entering critical section for process %d\n", i);
    mutex++;
    printf("critical section for process %d\n", i);
    printf("mutex %d\n", mutex);
    mutex--
    printf("leaving critical section for process %d\n", i);
    ticket[i] = 0;
}

proctype monitor() {
    assert(mutex != 2);
}

init {
    atomic {
        int h;
        for (h: 0 .. NUM_PROCS-1) {
            run P(h);
        }
        run monitor();
    }
}
