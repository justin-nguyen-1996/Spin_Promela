/* Tournament Algorithm based on Peterson's Algorithm for Two Processes */

#define N 4

typedef array {
	bool procs[N];
};

c_code { #include <math.h> };
int level = 2;
c_code {level = M_LOG2E * log(N); };
array wantCS[level];
array turn[level];
int ncrit;

active [N] proctype user()
{
	assert(_pid <= N);
	int node = _pid;
	int l;
	for (l : 0 .. (level - 1)) {
	    int id = node % 2;
	    node = node / 2;
	    wantCS[l].procs[2 * node + id] = true;
	    turn[l].procs[node] = id;
	    do
		:: if 
		   :: (wantCS[l].procs[2 * node + 1 - id] == false || turn[l].procs[node] == 1 - id) -> break;
		   :: else -> skip;
		   fi;
	    od;
	}
	ncrit++;
	assert(ncrit == 1); /* critical section */
	printf("PID %d is in CS\n", _pid);
	ncrit--;

	for (l : (level - 1) .. 0) {
	    int times;
	    int prod = 1;
	    for (times : (level - 1) .. 0) {
	    	prod = prod * 2;
	    }
	    node = _pid / (prod - 1);
	    wantCS[l].procs[node] = false;
	}
}